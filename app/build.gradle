apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext.versionMajor = 1
ext.versionMinor = 0
ext.versionPatch = 0
ext.versionClassifier = 1
ext.isSnapshot = false
ext.minimumSdkVersion = 14

android {
    compileSdkVersion 26
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.swarawan.dotaheroes"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "OPENDOTA_API_URL", "\"${getProperty("local.properties", "opendota_api_key")}\""

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename);
        }
    } else {
        print(filename + " does not exist!")
    }
}

private Integer generateVersionCode() {
    return ext.minimumSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null) {
        if (ext.isSnapshot) {
            ext.versionClassifier = "SNAPSHOT"
        }
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return versionName
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Support
    implementation 'com.android.support:appcompat-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support:cardview-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support:design:' + rootProject.ext.supportVersion

    // Butterknife
    implementation 'com.jakewharton:butterknife:' + rootProject.ext.butterknifeVersion
    kapt 'com.jakewharton:butterknife-compiler:' + rootProject.ext.butterknifeVersion

    // Anko
    implementation 'org.jetbrains.anko:anko-commons:' + rootProject.ext.ankoVersion

    // Room
    implementation "android.arch.persistence.room:runtime:" + rootProject.ext.roomVersion
    kapt "android.arch.persistence.room:compiler:" + rootProject.ext.roomVersion

    // Timber
    implementation 'com.jakewharton.timber:timber:' + rootProject.ext.timberVersion
    implementation 'com.github.ajalt:timberkt:1.3.0'

    // Gson
    implementation 'com.google.code.gson:gson:' + rootProject.ext.gsonVersion

    // Reactive
    implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:' + rootProject.ext.retrofitVersion
    implementation 'com.squareup.retrofit2:adapter-rxjava2:' + rootProject.ext.retrofitVersion
    implementation 'com.squareup.retrofit2:converter-gson:' + rootProject.ext.retrofitVersion

    // OkHttp
    implementation 'com.squareup.okhttp3:logging-interceptor:' + rootProject.ext.okHttpVersion

    // Glide
    implementation 'com.github.bumptech.glide:glide:' + rootProject.ext.glideVersion

    // Dagger2
    implementation 'com.google.dagger:dagger:' + rootProject.daggerVersion
    implementation 'com.google.dagger:dagger-android:' + rootProject.daggerVersion
    implementation 'com.google.dagger:dagger-android-support:' + rootProject.daggerVersion
    kapt 'com.google.dagger:dagger-compiler:' + rootProject.daggerVersion
    kapt 'com.google.dagger:dagger-android-processor:' + rootProject.daggerVersion

    // Others
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
